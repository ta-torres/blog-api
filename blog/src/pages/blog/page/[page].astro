---
export const prerender = false;
import { Image } from "astro:assets";
// add alias later
import BaseHead from "../../../components/BaseHead.astro";
import Footer from "../../../components/Footer.astro";
import FormattedDate from "../../../components/FormattedDate.astro";
import Header from "../../../components/Header.astro";
import { SITE_DESCRIPTION, SITE_TITLE } from "../../../consts";

const { page } = Astro.params;
const currentPage = Number(page) || 1;

async function fetchPosts(page = 1, limit = 10) {
  try {
    const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/posts?page=${page}&limit=${limit}`);
    if (!response.ok) throw new Error("Failed to fetch posts");
    return await response.json();
  } catch (error) {
    console.error("Error fetching posts:", error);
    return { posts: [], pagination: {} };
  }
}

const pageData = await fetchPosts(currentPage, 10);

const posts = pageData.posts.map((post) => ({
  id: post.id,
  slug: post.slug,
  data: {
    title: post.title,
    pubDate: new Date(post.createdAt),
    heroImage: post.postImage || null,
    description: post.description || "",
    author: post.author,
  }
})).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const nextUrl = pageData.pagination?.hasNext ? `/blog/page/${currentPage + 1}` : null;
const prevUrl = pageData.pagination?.hasPrev ? (currentPage === 2 ? `/blog/` : `/blog/page/${currentPage - 1}`) : null;
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`Blog - Page ${currentPage}`} description={SITE_DESCRIPTION} />
    <style>
      main {
        width: 960px;
      }
      ul {
        display: flex;
        flex-wrap: wrap;
        gap: 2rem;
        list-style-type: none;
        margin: 0;
        padding: 0;
      }
      ul li {
        width: calc(50% - 1rem);
      }
      ul li * {
        text-decoration: none;
        transition: 0.2s ease;
      }
      ul li:first-child {
        width: 100%;
        margin-bottom: 1rem;
        text-align: center;
      }
      ul li:first-child img {
        width: 100%;
      }
      ul li:first-child .title {
        font-size: 2.369rem;
      }
      ul li img {
        margin-bottom: 0.5rem;
        border-radius: 12px;
      }
      ul li a {
        display: block;
      }
      .title {
        margin: 0;
        color: rgb(var(--black));
        line-height: 1;
      }
      .date {
        margin: 0;
        color: rgb(var(--gray));
      }
      ul li a:hover h4,
      ul li a:hover .date {
        color: rgb(var(--accent));
      }
      ul a:hover img {
        box-shadow: var(--box-shadow);
      }
      @media (max-width: 720px) {
        ul {
          gap: 0.5em;
        }
        ul li {
          width: 100%;
          text-align: center;
        }
        ul li:first-child {
          margin-bottom: 0;
        }
        ul li:first-child .title {
          font-size: 1.563em;
        }
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      <section>
        {
          posts.length === 0 ? (
            <p style="text-align: center">No posts published yet.</p>
          ) : (
            <ul>
              {
                posts.map((post) => (
                  <li>
                    <a href={`/blog/${post.slug}/`}>
                      {post.data.heroImage && (
                        <Image
                          width={720}
                          height={360}
                          src={post.data.heroImage}
                          alt=""
                        />
                      )}
                      <h4 class="title">{post.data.title}</h4>
                      <p class="date">
                        <FormattedDate date={post.data.pubDate} />
                      </p>
                    </a>
                  </li>
                ))
              }
            </ul>
          )
        }

        <div style="display: flex; justify-content: space-between; margin-top: 2rem;">
          {prevUrl && <a href={prevUrl}>← Previous</a>}
          {nextUrl && <a href={nextUrl}>Next →</a>}
        </div>
      </section>
    </main>
    <Footer />
  </body>
</html>
