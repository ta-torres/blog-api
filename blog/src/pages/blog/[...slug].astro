---
export const prerender = false;
import { marked } from 'marked';
import hljs from 'highlight.js';
import 'highlight.js/styles/github.css';
import BlogPost from '../../layouts/BlogPost.astro';

const renderer = new marked.Renderer();

renderer.code = ({ text, lang }) => {
  const validLang = lang && hljs.getLanguage(lang) ? lang : 'plaintext';
  const highlighted = hljs.highlight(text, { language: validLang }).value;

  return `<pre><code class="hljs language-${validLang}">${highlighted}</code></pre>`;
};

marked.setOptions({
  breaks: true,
  gfm: true,
  renderer
});

const { slug } = Astro.params;

async function fetchPost(postId) {
  try {
    const response = await fetch(`${import.meta.env.PUBLIC_API_URL}api/posts/${postId}`);
    
    if (!response.ok) {
      throw new Error('Failed to fetch posts');
    }
    
    return await response.json();
  } catch (error) {
    console.error('Error fetching post:', error);
    return null;
  }
}

const post = await fetchPost(slug);

if (!post) {
  return Astro.redirect('/404');
}

const htmlContent = marked.parse(post.content);

const postData = {
  title: post.title,
  pubDate: new Date(post.createdAt),
  heroImage: post.heroImage || null,
  description: post.description || '',
  author: post.author,
}
---

<BlogPost 
  {...postData}
>
  <div set:html={htmlContent}></div>
</BlogPost>